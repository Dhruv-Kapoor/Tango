name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

jobs:
  build:
    environment:
      name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Create required files
        run: |
          echo "${{ secrets.KEYSTORE }}" > keystore.jks
          base64 --decode keystore.jks > app/release.keystore
          echo SERVER_CLIENT_ID = \"${{ secrets.SERVER_CLIENT_ID }}\" > secrets.properties
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > app/google-services.txt
          base64 --decode app/google-services.txt > app/google-services.json
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Release APK
        run: |
          ./gradlew assembleRelease

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app/build/outputs/apk/release/app-release.apk

  deploy:
    needs: build
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "dhruvkapoor.200@gmail.com"
          git remote set-url origin "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: ./downloaded-artifacts/

      - name: Copy file
        run: |
          cp ./downloaded-artifacts/app-release.apk builds/Tango.apk

      - name: Commit changes
        id: commit
        run: |
          git add builds/Tango.apk
          git commit -m "[Github-Actions] release build" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref }}

      - name: Extract versionName and versionCode
        id: gradle-version
        run: |
          VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | awk -F\" '{print $2}')
          VERSION_CODE=$(grep 'versionCode' app/build.gradle.kts | awk '{print $3}')
          
          echo "VersionName: $VERSION_NAME"
          echo "VersionCode: $VERSION_CODE"
          
          echo "versionName=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "versionCode=$VERSION_CODE" >> $GITHUB_OUTPUT
          
      - name: Create tag
        if: steps.commit.outcome == 'success'
        id: tag
        run: |
          TAG_NAME="v${{ steps.gradle-version.outputs.versionName }}__${{ steps.gradle-version.outputs.versionCode }}"

          git tag $TAG_NAME
          git push origin $TAG_NAME

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Setup Node
        id: setup-node
        if: steps.tag.outcome == 'success'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'


      - name: Update Firestore
        if: steps.setup-node.outcome == 'success'
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          VERSION_CODE: ${{ steps.gradle-version.outputs.versionCode }}
        run: |
          npm install firebase-admin
          node update_firestore.js
